"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const tools_1 = require("./utils/tools");
const commands_1 = require("./commands");
const modify_tags_1 = require("./utils/modify-tags");
const config_1 = require("./utils/config");
const editor_1 = require("./editor");
const binaries_1 = require("./binaries");
const tests_1 = require("./utils/tests");
const playground_1 = require("./utils/playground");
async function activate(context) {
    config_1.setStoragePath(context.storagePath);
    if (config_1.getConfig().enable === false) {
        return;
    }
    registerGeneral(context);
    registerGopls(context);
    registerTest(context);
    registerTags(context);
    registerPlaygroud(context);
}
exports.activate = activate;
async function registerGeneral(context) {
    context.subscriptions.push(coc_nvim_1.commands.registerCommand("go.version", () => commands_1.version()));
}
async function registerGopls(context) {
    const config = config_1.getConfig();
    const getGoplsPath = () => {
        if (config.commandPath) {
            coc_nvim_1.workspace.showMessage("Go: Configuration 'go.commandPath' is deprected, use 'go.goplsPath' instead!", "warning");
            return config.commandPath;
        }
        return config.goplsPath;
    };
    const command = getGoplsPath() || await tools_1.goBinPath(binaries_1.GOPLS);
    if (!await tools_1.commandExists(command)) {
        if (!await tools_1.installGoBin(binaries_1.GOPLS)) {
            return;
        }
    }
    const serverOptions = {
        command,
        args: config.goplsArgs
    };
    const clientOptions = {
        documentSelector: ['go'],
        initializationOptions: () => config_1.getConfig().goplsOptions
    };
    const client = new coc_nvim_1.LanguageClient('go', 'gopls', serverOptions, clientOptions);
    context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client), 
    // restart gopls if options changed
    coc_nvim_1.workspace.onDidChangeConfiguration(async (e) => {
        if (e.affectsConfiguration('go.goplsOptions')) {
            await client.stop();
            client.restart();
        }
    }), coc_nvim_1.commands.registerCommand("go.install.gopls", () => commands_1.installGopls(client)));
}
async function registerTest(context) {
    if (!await tools_1.installGoBin(binaries_1.GOTESTS)) {
        return;
    }
    context.subscriptions.push(coc_nvim_1.commands.registerCommand("go.install.gotests", () => commands_1.installGotests()), coc_nvim_1.commands.registerCommand("go.test.generate.file", async () => tests_1.generateTestsAll(await editor_1.activeTextDocument())), coc_nvim_1.commands.registerCommand("go.test.generate.exported", async () => tests_1.generateTestsExported(await editor_1.activeTextDocument())), coc_nvim_1.commands.registerCommand("go.test.toggle", async () => tests_1.toogleTests(await editor_1.activeTextDocument())));
}
async function registerTags(context) {
    if (!await tools_1.installGoBin(binaries_1.GOMODIFYTAGS)) {
        return;
    }
    context.subscriptions.push(coc_nvim_1.commands.registerCommand("go.install.gomodifytags", () => commands_1.installGomodifytags()), coc_nvim_1.commands.registerCommand("go.tags.add", async (...tags) => modify_tags_1.addTags(await editor_1.activeTextDocument(), { tags })), coc_nvim_1.commands.registerCommand("go.tags.add.line", async (...tags) => modify_tags_1.addTags(await editor_1.activeTextDocument(), { tags, selection: "line" })), coc_nvim_1.commands.registerCommand("go.tags.add.prompt", async () => modify_tags_1.addTags(await editor_1.activeTextDocument(), { prompt: true })), coc_nvim_1.commands.registerCommand("go.tags.remove", async (...tags) => modify_tags_1.removeTags(await editor_1.activeTextDocument(), { tags })), coc_nvim_1.commands.registerCommand("go.tags.remove.line", async (...tags) => modify_tags_1.removeTags(await editor_1.activeTextDocument(), { tags, selection: "line" })), coc_nvim_1.commands.registerCommand("go.tags.remove.prompt", async () => modify_tags_1.removeTags(await editor_1.activeTextDocument(), { prompt: true })), coc_nvim_1.commands.registerCommand("go.tags.clear", async () => modify_tags_1.clearTags(await editor_1.activeTextDocument())), coc_nvim_1.commands.registerCommand("go.tags.clear.line", async () => modify_tags_1.clearTags(await editor_1.activeTextDocument(), { selection: "line" })));
}
async function registerPlaygroud(context) {
    context.subscriptions.push(coc_nvim_1.commands.registerCommand("go.install.goplay", () => commands_1.installGoplay()), coc_nvim_1.commands.registerCommand("go.playground", async () => playground_1.openPlayground(await editor_1.activeTextDocument())));
}
//# sourceMappingURL=extension.js.map