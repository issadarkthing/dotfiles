"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const child_process_1 = require("child_process");
const coc_nvim_1 = require("coc.nvim");
const which_1 = tslib_1.__importDefault(require("which"));
const config_1 = require("./config");
////////////////////////////////////////////////////////////////////////////////
async function installGoBin(source, force = false) {
    const name = goBinName(source);
    if (!force && await goBinExists(name)) {
        return true;
    }
    const statusItem = coc_nvim_1.workspace.createStatusBarItem(90, { progress: true });
    statusItem.text = `Installing '${name}'`;
    statusItem.show();
    const success = await goRun(`get ${source}@latest`);
    if (success) {
        coc_nvim_1.workspace.showMessage(`Installed '${name}'`);
    }
    else {
        coc_nvim_1.workspace.showMessage(`Failed to install '${name}'`, 'error');
    }
    statusItem.hide();
    return success;
}
exports.installGoBin = installGoBin;
async function goBinPath(source) {
    const name = goBinName(source);
    return path_1.default.join(await config_1.configDir('bin'), name);
}
exports.goBinPath = goBinPath;
async function runGoTool(name, args = []) {
    const bin = await goBinPath(name);
    return new Promise((resolve) => {
        const p = child_process_1.spawn(bin, args);
        let out = "";
        p.stdout.on('data', (data) => out += data);
        p.on("close", code => resolve([code, out]));
    });
}
exports.runGoTool = runGoTool;
async function commandExists(command) {
    return new Promise((resolve) => { which_1.default(command, (err) => resolve(err == null)); });
}
exports.commandExists = commandExists;
////////////////////////////////////////////////////////////////////////////////
async function goBinExists(source) {
    const name = goBinName(source);
    const bin = await goBinPath(name);
    return new Promise((resolve) => fs_1.default.open(bin, 'r', (err) => resolve(err === null)));
}
async function goRun(args) {
    const gopath = await config_1.configDir('tools');
    const gobin = await config_1.configDir('bin');
    const cmd = `env GOBIN=${gobin} GOPATH=${gopath} GO111MODULE=on go ${args}`;
    try {
        await coc_nvim_1.workspace.runCommand(cmd, gopath);
    }
    catch (ex) {
        coc_nvim_1.workspace.showMessage(ex);
        return false;
    }
    return true;
}
function goBinName(source) {
    return source.replace(/\/\.\.\.$/, '').split('/').pop();
}
//# sourceMappingURL=tools.js.map