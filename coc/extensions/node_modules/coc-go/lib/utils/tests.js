"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const cp = require("child_process");
const tools_1 = require("./tools");
const binaries_1 = require("../binaries");
////////////////////////////////////////////////////////////////////////////////
async function generateTestsAll(document) {
    if (isTest(document)) {
        coc_nvim_1.workspace.showMessage("Document is a test file", "error");
        return;
    }
    await runGotests(document, ["-all"]) && await openTests(document);
}
exports.generateTestsAll = generateTestsAll;
async function generateTestsExported(document) {
    if (isTest(document)) {
        coc_nvim_1.workspace.showMessage("Document is a test file", "error");
        return;
    }
    await runGotests(document, ["-exported"]) && await openTests(document);
}
exports.generateTestsExported = generateTestsExported;
async function toogleTests(document) {
    const targetURI = isTest(document)
        ? sourceURI(document)
        : testURI(document);
    return coc_nvim_1.workspace.openResource(targetURI);
}
exports.toogleTests = toogleTests;
////////////////////////////////////////////////////////////////////////////////
async function openTests(document) {
    return coc_nvim_1.workspace.openResource(testURI(document));
}
function isTest(document) {
    return document.uri.endsWith('_test.go');
}
function testURI(document) {
    return document.uri.replace(/(_test)?\.go$/, '_test.go');
}
function sourceURI(document) {
    return document.uri.replace(/(_test)?\.go$/, '.go');
}
async function runGotests(document, args) {
    const config = coc_nvim_1.workspace.getConfiguration().get('go.tests', {});
    args.push(...(config.generateFlags || []), '-w', document.uri.replace(/^file:\/\//, ''));
    const gotests = await tools_1.goBinPath(binaries_1.GOTESTS);
    return new Promise((resolve, reject) => {
        cp.execFile(gotests, args, { env: {} }, async (err, stdout, stderr) => {
            if (err) {
                coc_nvim_1.workspace.showMessage(`Error: ${stderr}`, "error");
                return reject();
            }
            coc_nvim_1.workspace.showMessage(stdout || "");
            resolve(true);
        });
    });
}
//# sourceMappingURL=tests.js.map