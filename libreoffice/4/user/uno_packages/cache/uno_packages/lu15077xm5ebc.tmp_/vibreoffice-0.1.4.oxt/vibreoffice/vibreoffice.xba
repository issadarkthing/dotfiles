<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="vibreoffice" script:language="StarBasic">
&apos; vibreoffice - Vi Mode for LibreOffice/OpenOffice
&apos;
&apos; The MIT License (MIT)
&apos;
&apos; Copyright (c) 2014 Sean Yeh
&apos;
&apos; Permission is hereby granted, free of charge, to any person obtaining a copy
&apos; of this software and associated documentation files (the &quot;Software&quot;), to deal
&apos; in the Software without restriction, including without limitation the rights
&apos; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
&apos; copies of the Software, and to permit persons to whom the Software is
&apos; furnished to do so, subject to the following conditions:
&apos;
&apos; The above copyright notice and this permission notice shall be included in
&apos; all copies or substantial portions of the Software.
&apos;
&apos; THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
&apos; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
&apos; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
&apos; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
&apos; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
&apos; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
&apos; THE SOFTWARE.

Option Explicit

&apos; --------
&apos; Globals
&apos; --------
global VIBREOFFICE_STARTED as boolean &apos; Defaults to False
global VIBREOFFICE_ENABLED as boolean &apos; Defaults to False

global oXKeyHandler as object

&apos; Global State
global MODE as string
global VIEW_CURSOR as object
global MULTIPLIER as integer

&apos; -----------
&apos; Singletons
&apos; -----------
Function getCursor
    getCursor = VIEW_CURSOR
End Function

Function getTextCursor
    dim oTextCursor
    On Error Goto ErrorHandler
    oTextCursor = getCursor().getText.createTextCursorByRange(getCursor())

    getTextCursor = oTextCursor
    Exit Function

ErrorHandler:
    &apos; Text Cursor does not work in some instances, such as in Annotations
    getTextCursor = Nothing
End Function

&apos; -----------------
&apos; Helper Functions
&apos; -----------------
Sub restoreStatus &apos;restore original statusbar
    dim oLayout
    oLayout = thisComponent.getCurrentController.getFrame.LayoutManager
    oLayout.destroyElement(&quot;private:resource/statusbar/statusbar&quot;)
    oLayout.createElement(&quot;private:resource/statusbar/statusbar&quot;)
End Sub

Sub setRawStatus(rawText)
    thisComponent.Currentcontroller.StatusIndicator.Start(rawText, 0)
End Sub

Sub setStatus(statusText)
    setRawStatus(MODE &amp; &quot; | &quot; &amp; statusText &amp; &quot; | special: &quot; &amp; getSpecial() &amp; &quot; | &quot; &amp; &quot;modifier: &quot; &amp; getMovementModifier())
End Sub

Sub setMode(modeName)
    MODE = modeName
    setRawStatus(modeName)
End Sub

Function gotoMode(sMode)
    Select Case sMode
        Case &quot;NORMAL&quot;:
            setMode(&quot;NORMAL&quot;)
            setMovementModifier(&quot;&quot;)
        Case &quot;INSERT&quot;:
            setMode(&quot;INSERT&quot;)
        Case &quot;VISUAL&quot;:
            setMode(&quot;VISUAL&quot;)

            dim oTextCursor
            oTextCursor = getTextCursor()
            &apos; Deselect TextCursor
            oTextCursor.gotoRange(oTextCursor.getStart(), False)
            &apos; Show TextCursor selection
            thisComponent.getCurrentController.Select(oTextCursor)
    End Select
End Function

Sub cursorReset(oTextCursor)
    oTextCursor.gotoRange(oTextCursor.getStart(), False)
    oTextCursor.goRight(1, False)
    oTextCursor.goLeft(1, True)
    thisComponent.getCurrentController.Select(oTextCursor)
End Sub

Function samePos(oPos1, oPos2)
    samePos = oPos1.X() = oPos2.X() And oPos1.Y() = oPos2.Y()
End Function

Function genString(sChar, iLen)
    dim sResult, i
    sResult = &quot;&quot;
    For i = 1 To iLen
        sResult = sResult &amp; sChar
    Next i
    genString = sResult
End Function

&apos; Yanks selection to system clipboard.
&apos; If bDelete is true, will delete selection.
Sub yankSelection(bDelete)
    dim dispatcher As Object
    dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
    dispatcher.executeDispatch(ThisComponent.CurrentController.Frame, &quot;.uno:Copy&quot;, &quot;&quot;, 0, Array())

    If bDelete Then
        getTextCursor().setString(&quot;&quot;)
    End If
End Sub


Sub pasteSelection()
    dim oTextCursor, dispatcher As Object

    &apos; Deselect if in NORMAL mode to avoid overwriting the character underneath
    &apos; the cursor
    If MODE = &quot;NORMAL&quot; Then
        oTextCursor = getTextCursor()
        oTextCursor.gotoRange(oTextCursor.getStart(), False)
        thisComponent.getCurrentController.Select(oTextCursor)
    End If

    dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
    dispatcher.executeDispatch(ThisComponent.CurrentController.Frame, &quot;.uno:Paste&quot;, &quot;&quot;, 0, Array())
End Sub


&apos; -----------------------------------
&apos; Special Mode (for chained commands)
&apos; -----------------------------------
global SPECIAL_MODE As string
global SPECIAL_COUNT As integer

Sub setSpecial(specialName)
    SPECIAL_MODE = specialName

    If specialName = &quot;&quot; Then
        SPECIAL_COUNT = 0
    Else
        SPECIAL_COUNT = 2
    End If
End Sub

Function getSpecial()
    getSpecial = SPECIAL_MODE
End Function

Sub delaySpecialReset()
    SPECIAL_COUNT = SPECIAL_COUNT + 1
End Sub

Sub resetSpecial(Optional bForce)
    If IsMissing(bForce) Then bForce = False

    SPECIAL_COUNT = SPECIAL_COUNT - 1
    If SPECIAL_COUNT &lt;= 0 Or bForce Then
        setSpecial(&quot;&quot;)
    End If
End Sub


&apos; -----------------
&apos; Movement Modifier
&apos; -----------------
&apos;f,i,a
global MOVEMENT_MODIFIER As string

Sub setMovementModifier(modifierName)
    MOVEMENT_MODIFIER = modifierName
End Sub

Function getMovementModifier()
    getMovementModifier = MOVEMENT_MODIFIER
End Function


&apos; --------------------
&apos; Multiplier functions
&apos; --------------------
Sub _setMultiplier(n as integer)
    MULTIPLIER = n
End Sub

Sub resetMultiplier()
    _setMultiplier(0)
End Sub

Sub addToMultiplier(n as integer)
    dim sMultiplierStr as String
    dim iMultiplierInt as integer

    &apos; Max multiplier: 10000 (stop accepting additions after 1000)
    If MULTIPLIER &lt;= 1000 then
        sMultiplierStr = CStr(MULTIPLIER) &amp; CStr(n)
        _setMultiplier(CInt(sMultiplierStr))
    End If
End Sub

&apos; Should only be used if you need the raw value
Function getRawMultiplier()
    getRawMultiplier = MULTIPLIER
End Function

&apos; Same as getRawMultiplier, but defaults to 1 if it is unset (0)
Function getMultiplier()
    If MULTIPLIER = 0 Then
        getMultiplier = 1
    Else
        getMultiplier = MULTIPLIER
    End If
End Function


&apos; -------------
&apos; Key Handling
&apos; -------------
Sub sStartXKeyHandler
    sStopXKeyHandler()

    oXKeyHandler = CreateUnoListener(&quot;KeyHandler_&quot;, &quot;com.sun.star.awt.XKeyHandler&quot;)
    thisComponent.CurrentController.AddKeyHandler(oXKeyHandler)
End Sub

Sub sStopXKeyHandler
    thisComponent.CurrentController.removeKeyHandler(oXKeyHandler)
End Sub

Sub XKeyHandler_Disposing(oEvent)
End Sub


&apos; --------------------
&apos; Main Key Processing
&apos; --------------------
function KeyHandler_KeyPressed(oEvent) as boolean
    dim oTextCursor

    &apos; Exit if plugin is not enabled
    If IsMissing(VIBREOFFICE_ENABLED) Or Not VIBREOFFICE_ENABLED Then
        KeyHandler_KeyPressed = False
        Exit Function
    End If

    &apos; Exit if TextCursor does not work (as in Annotations)
    oTextCursor = getTextCursor()
    If oTextCursor Is Nothing Then
        KeyHandler_KeyPressed = False
        Exit Function
    End If

    dim bConsumeInput, bIsMultiplier, bIsModified, bIsSpecial
    bConsumeInput = True &apos; Block all inputs by default
    bIsMultiplier = False &apos; reset multiplier by default
    bIsModified = oEvent.Modifiers &gt; 1 &apos; If Ctrl or Alt is held down. (Shift=1)
    bIsSpecial = getSpecial() &lt;&gt; &quot;&quot;


    &apos; --------------------------
    &apos; Process global shortcuts, exit if matched (like ESC)
    If ProcessGlobalKey(oEvent) Then
        &apos; Pass

    &apos; If INSERT mode, allow all inputs
    ElseIf MODE = &quot;INSERT&quot; Then
        bConsumeInput = False

    &apos; If Change Mode
    &apos; ElseIf MODE = &quot;NORMAL&quot; And Not bIsSpecial And getMovementModifier() = &quot;&quot; And ProcessModeKey(oEvent) Then
    ElseIf ProcessModeKey(oEvent) Then
        &apos; Pass

    &apos; Replace Key
    ElseIf getSpecial() = &quot;r&quot; And Not bIsModified Then
        dim iLen
        iLen = Len(getCursor().getString())
        getCursor().setString(genString(oEvent.KeyChar, iLen))

    &apos; Multiplier Key
    ElseIf ProcessNumberKey(oEvent) Then
        bIsMultiplier = True
        delaySpecialReset()

    &apos; Normal Key
    ElseIf ProcessNormalKey(oEvent.KeyChar, oEvent.Modifiers) Then
        &apos; Pass

    &apos; If is modified but doesn&apos;t match a normal command, allow input
    &apos;   (Useful for built-in shortcuts like Ctrl+s, Ctrl+w)
    ElseIf bIsModified Then
        bConsumeInput = False

    &apos; Movement modifier here?
    ElseIf ProcessMovementModifierKey(oEvent.KeyChar) Then
        delaySpecialReset()

    &apos; If standard movement key (in VISUAL mode) like arrow keys, home, end
    ElseIf MODE = &quot;VISUAL&quot; And ProcessStandardMovementKey(oEvent) Then
        &apos; Pass

    &apos; If bIsSpecial but nothing matched, return to normal mode
    ElseIf bIsSpecial Then
        gotoMode(&quot;NORMAL&quot;)

    &apos; Allow non-letter keys if unmatched
    ElseIf asc(oEvent.KeyChar) = 0 Then
        bConsumeInput = False
    End If
    &apos; --------------------------

    &apos; Reset Special
    resetSpecial()

    &apos; Reset multiplier if last input was not number and not in special mode
    If not bIsMultiplier and getSpecial() = &quot;&quot; and getMovementModifier() = &quot;&quot; Then
        resetMultiplier()
    End If
    setStatus(getMultiplier())

    KeyHandler_KeyPressed = bConsumeInput
End Function

Function KeyHandler_KeyReleased(oEvent) As boolean
    dim oTextCursor

    &apos; Show terminal-like cursor
    oTextCursor = getTextCursor()
    If oTextCursor Is Nothing Then
        &apos; Do nothing
    ElseIf oEvent.Modifiers = 2 Or oEvent.Modifiers = 8 And oEvent.KeyChar = &quot;c&quot; Then
        &apos; Allow Ctrl+c for Copy, so don&apos;t change cursor
        &apos; Pass
    ElseIf MODE = &quot;NORMAL&quot; Then
        cursorReset(oTextCursor)
    ElseIf MODE = &quot;INSERT&quot; Then
        oTextCursor.gotoRange(oTextCursor.getStart(), False)
        thisComponent.getCurrentController.Select(oTextCursor)
    End If

    KeyHandler_KeyReleased = (MODE = &quot;NORMAL&quot;) &apos;cancel KeyReleased
End Function


&apos; ----------------
&apos; Processing Keys
&apos; ----------------
Function ProcessGlobalKey(oEvent)
    dim bMatched, bIsControl
    bMatched = True
    bIsControl = (oEvent.Modifiers = 2) or (oEvent.Modifiers = 8)

    &apos; PRESSED ESCAPE (or ctrl+[)
    if oEvent.KeyCode = 1281 Or (oEvent.KeyCode = 1315 And bIsControl) Then
        &apos; Move cursor back if was in INSERT (but stay on same line)
        If MODE &lt;&gt; &quot;NORMAL&quot; And Not getCursor().isAtStartOfLine() Then
            getCursor().goLeft(1, False)
        End If

        resetSpecial(True)
        gotoMode(&quot;NORMAL&quot;)
    Else
        bMatched = False
    End If
    ProcessGlobalKey = bMatched
End Function


Function ProcessStandardMovementKey(oEvent)
    dim c, bMatched
    c = oEvent.KeyCode

    bMatched = True

    If MODE &lt;&gt; &quot;VISUAL&quot; Then
        bMatched = False
        &apos;Pass
    ElseIf c = 1024 Then
        ProcessMovementKey(&quot;j&quot;, True)
    ElseIf c = 1025 Then
        ProcessMovementKey(&quot;k&quot;, True)
    ElseIf c = 1026 Then
        ProcessMovementKey(&quot;h&quot;, True)
    ElseIf c = 1027 Then
        ProcessMovementKey(&quot;l&quot;, True)
    ElseIf c = 1028 Then
        ProcessMovementKey(&quot;^&quot;, True)
    ElseIf c = 1029 Then
        ProcessMovementKey(&quot;$&quot;, True)
    Else
        bMatched = False
    End If

    ProcessStandardMovementKey = bMatched
End Function


Function ProcessNumberKey(oEvent)
    dim c
    c = CStr(oEvent.KeyChar)

    If c &gt;= &quot;0&quot; and c &lt;= &quot;9&quot; Then
        addToMultiplier(CInt(c))
        ProcessNumberKey = True
    Else
        ProcessNumberKey = False
    End If
End Function


Function ProcessModeKey(oEvent)
    dim bIsModified
    bIsModified = oEvent.Modifiers &gt; 1 &apos; If Ctrl or Alt is held down. (Shift=1)
    &apos; Don&apos;t change modes in these circumstances
    If MODE &lt;&gt; &quot;NORMAL&quot; Or bIsModified Or getSpecial &lt;&gt; &quot;&quot; Or getMovementModifier() &lt;&gt; &quot;&quot; Then
        ProcessModeKey = False
        Exit Function
    End If

    &apos; Mode matching
    dim bMatched
    bMatched = True
    Select Case oEvent.KeyChar
        &apos; Insert modes
        Case &quot;i&quot;, &quot;a&quot;, &quot;I&quot;, &quot;A&quot;, &quot;o&quot;, &quot;O&quot;:
            If oEvent.KeyChar = &quot;a&quot; Then getCursor().goRight(1, False)
            If oEvent.KeyChar = &quot;I&quot; Then ProcessMovementKey(&quot;^&quot;)
            If oEvent.KeyChar = &quot;A&quot; Then ProcessMovementKey(&quot;$&quot;)

            If oEvent.KeyChar = &quot;o&quot; Then
                ProcessMovementKey(&quot;$&quot;)
                ProcessMovementKey(&quot;l&quot;)
                getCursor().setString(chr(13))
                If Not getCursor().isAtStartOfLine() Then
                    getCursor().setString(chr(13) &amp; chr(13))
                    ProcessMovementKey(&quot;l&quot;)
                End If
            End If

            If oEvent.KeyChar = &quot;O&quot; Then
                ProcessMovementKey(&quot;^&quot;)
                getCursor().setString(chr(13))
                If Not getCursor().isAtStartOfLine() Then
                    ProcessMovementKey(&quot;h&quot;)
                    getCursor().setString(chr(13))
                    ProcessMovementKey(&quot;l&quot;)
                End If
            End If

            gotoMode(&quot;INSERT&quot;)
        Case &quot;v&quot;:
            gotoMode(&quot;VISUAL&quot;)
        Case Else:
            bMatched = False
    End Select
    ProcessModeKey = bMatched
End Function


Function ProcessNormalKey(keyChar, modifiers)
    dim i, bMatched, bIsVisual, iIterations, bIsControl
    bIsControl = (modifiers = 2) or (modifiers = 8)

    bIsVisual = (MODE = &quot;VISUAL&quot;) &apos; is this hardcoding bad? what about visual block?

    &apos; ----------------------
    &apos; 1. Check Movement Key
    &apos; ----------------------
    iIterations = getMultiplier()
    bMatched = False
    For i = 1 To iIterations
        dim bMatchedMovement

        &apos; Movement Key
        bMatchedMovement = ProcessMovementKey(KeyChar, bIsVisual, modifiers)
        bMatched = bMatched or bMatchedMovement


        &apos; If Special: d/c + movement
        If bMatched And (getSpecial() = &quot;d&quot; Or getSpecial() = &quot;c&quot; Or getSpecial() = &quot;y&quot;) Then
            yankSelection((getSpecial() &lt;&gt; &quot;y&quot;))
        End If
    Next i

    &apos; Reset Movement Modifier
    setMovementModifier(&quot;&quot;)

    &apos; Exit already if movement key was matched
    If bMatched Then
        &apos; If Special: d/c : change mode
        If getSpecial() = &quot;d&quot; Or getSpecial() = &quot;y&quot; Then gotoMode(&quot;NORMAL&quot;)
        If getSpecial() = &quot;c&quot; Then gotoMode(&quot;INSERT&quot;)

        ProcessNormalKey = True
        Exit Function
    End If


    &apos; --------------------
    &apos; 2. Undo/Redo
    &apos; --------------------
    If keyChar = &quot;u&quot; Or (bIsControl And keyChar = &quot;r&quot;) Then
        For i = 1 To iIterations
            Undo(keyChar = &quot;u&quot;)
        Next i

        ProcessNormalKey = True
        Exit Function
    End If


    &apos; --------------------
    &apos; 3. Paste
    &apos;   Note: in vim, paste will result in cursor being over the last character
    &apos;   of the pasted content. Here, the cursor will be the next character
    &apos;   after that. Fix?
    &apos; --------------------
    If keyChar = &quot;p&quot; or keyChar = &quot;P&quot; Then
        &apos; Move cursor right if &quot;p&quot; to paste after cursor
        If keyChar = &quot;p&quot; Then
            ProcessMovementKey(&quot;l&quot;, False)
        End If

        For i = 1 To iIterations
            pasteSelection()
        Next i

        ProcessNormalKey = True
        Exit Function
    End If


    &apos; --------------------
    &apos; 4. Check Special/Delete Key
    &apos; --------------------

    &apos; There are no special/delete keys with modifier keys, so exit early
    If modifiers &gt; 1 Then
        ProcessNormalKey = False
        Exit Function
    End If

    &apos; Only &apos;x&apos; or Special (dd, cc) can be done more than once
    If keyChar &lt;&gt; &quot;x&quot; and getSpecial() = &quot;&quot; Then
        iIterations = 1
    End If
    For i = 1 To iIterations
        dim bMatchedSpecial

        &apos; Special/Delete Key
        bMatchedSpecial = ProcessSpecialKey(keyChar)

        bMatched = bMatched or bMatchedSpecial
    Next i


    ProcessNormalKey = bMatched
End Function


&apos; Function for both undo and redo
Sub Undo(bUndo)
    On Error Goto ErrorHandler

    If bUndo Then
        thisComponent.getUndoManager().undo()
    Else
        thisComponent.getUndoManager().redo()
    End If
    Exit Sub

    &apos; Ignore errors from no more undos/redos in stack
ErrorHandler:
    Resume Next
End Sub


Function ProcessSpecialKey(keyChar)
    dim oTextCursor, bMatched, bIsSpecial, bIsDelete
    bMatched = True
    bIsSpecial = getSpecial() &lt;&gt; &quot;&quot;


    If keyChar = &quot;d&quot; Or keyChar = &quot;c&quot; Or keyChar = &quot;s&quot; Or keyChar = &quot;y&quot; Then
        bIsDelete = (keyChar &lt;&gt; &quot;y&quot;)

        &apos; Special Cases: &apos;dd&apos; and &apos;cc&apos;
        If bIsSpecial Then
            dim bIsSpecialCase
            bIsSpecialCase = (keyChar = &quot;d&quot; And getSpecial() = &quot;d&quot;) Or (keyChar = &quot;c&quot; And getSpecial() = &quot;c&quot;)

            If bIsSpecialCase Then
                ProcessMovementKey(&quot;^&quot;, False)
                ProcessMovementKey(&quot;j&quot;, True)

                oTextCursor = getTextCursor()
                thisComponent.getCurrentController.Select(oTextCursor)
                yankSelection(bIsDelete)
            Else
                bMatched = False
            End If

            &apos; Go to INSERT mode after &apos;cc&apos;, otherwise NORMAL
            If bIsSpecialCase And keyChar = &quot;c&quot; Then
                gotoMode(&quot;INSERT&quot;)
            Else
                gotoMode(&quot;NORMAL&quot;)
            End If


        &apos; visual mode: delete selection
        ElseIf MODE = &quot;VISUAL&quot; Then
            oTextCursor = getTextCursor()
            thisComponent.getCurrentController.Select(oTextCursor)

            yankSelection(bIsDelete)

            If keyChar = &quot;c&quot; Or keyChar = &quot;s&quot; Then gotoMode(&quot;INSERT&quot;)
            If keyChar = &quot;d&quot; Or keyChar = &quot;y&quot; Then gotoMode(&quot;NORMAL&quot;)


        &apos; Enter Special mode: &apos;d&apos;, &apos;c&apos;, or &apos;y&apos; (&apos;s&apos; =&gt; &apos;cl&apos;)
        ElseIf MODE = &quot;NORMAL&quot; Then

            &apos; &apos;s&apos; =&gt; &apos;cl&apos;
            If keyChar = &quot;s&quot; Then
                setSpecial(&quot;c&quot;)
                gotoMode(&quot;VISUAL&quot;)
                ProcessNormalKey(&quot;l&quot;, 0)
            Else
                setSpecial(keyChar)
                gotoMode(&quot;VISUAL&quot;)
            End If
        End If

    &apos; If is &apos;r&apos; for replace
    ElseIf keyChar = &quot;r&quot; Then
        setSpecial(&quot;r&quot;)

    &apos; Otherwise, ignore if bIsSpecial
    ElseIf bIsSpecial Then
        bMatched = False


    ElseIf keyChar = &quot;x&quot; Then
        oTextCursor = getTextCursor()
        thisComponent.getCurrentController.Select(oTextCursor)
        yankSelection(True)

        &apos; Reset Cursor
        cursorReset(oTextCursor)

        &apos; Goto NORMAL mode (in the case of VISUAL mode)
        gotoMode(&quot;NORMAL&quot;)

    ElseIf keyChar = &quot;D&quot; Or keyChar = &quot;C&quot; Then
        If MODE = &quot;VISUAL&quot; Then
            ProcessMovementKey(&quot;^&quot;, False)
            ProcessMovementKey(&quot;$&quot;, True)
            ProcessMovementKey(&quot;l&quot;, True)
        Else
            &apos; Deselect
            oTextCursor = getTextCursor()
            oTextCursor.gotoRange(oTextCursor.getStart(), False)
            thisComponent.getCurrentController.Select(oTextCursor)
            ProcessMovementKey(&quot;$&quot;, True)
        End If

        yankSelection(True)

        If keyChar = &quot;D&quot; Then
            gotoMode(&quot;NORMAL&quot;)
        ElseIf keyChar = &quot;C&quot; Then
            gotoMode(&quot;INSERT&quot;)
        End IF

    &apos; S only valid in NORMAL mode
    ElseIf keyChar = &quot;S&quot; And MODE = &quot;NORMAL&quot; Then
        ProcessMovementKey(&quot;^&quot;, False)
        ProcessMovementKey(&quot;$&quot;, True)
        yankSelection(True)
        gotoMode(&quot;INSERT&quot;)

    Else
        bMatched = False
    End If

    ProcessSpecialKey = bMatched
End Function


Function ProcessMovementModifierKey(keyChar)
    dim bMatched

    bMatched = True
    Select Case keyChar
        Case &quot;f&quot;, &quot;t&quot;, &quot;F&quot;, &quot;T&quot;, &quot;i&quot;, &quot;a&quot;:
            setMovementModifier(keyChar)
        Case Else:
            bMatched = False
    End Select

    ProcessMovementModifierKey = bMatched
End Function


Function ProcessSearchKey(oTextCursor, searchType, keyChar, bExpand)
    &apos;-----------
    &apos; Searching
    &apos;-----------
    dim bMatched, oSearchDesc, oFoundRange, bIsBackwards, oStartRange
    bMatched = True
    bIsBackwards = (searchType = &quot;F&quot; Or searchType = &quot;T&quot;)

    If Not bIsBackwards Then
        &apos; VISUAL mode will goRight AFTER the selection
        If MODE &lt;&gt; &quot;VISUAL&quot; Then
            &apos; Start searching from next character
            oTextCursor.goRight(1, bExpand)
        End If

        oStartRange = oTextCursor.getEnd()
        &apos; Go back one
        oTextCursor.goLeft(1, bExpand)
    Else
        oStartRange = oTextCursor.getStart()
    End If

    oSearchDesc = thisComponent.createSearchDescriptor()
    oSearchDesc.setSearchString(keyChar)
    oSearchDesc.SearchCaseSensitive = True
    oSearchDesc.SearchBackwards = bIsBackwards

    oFoundRange = thisComponent.findNext( oStartRange, oSearchDesc )

    If not IsNull(oFoundRange) Then
        dim oText, foundPos, curPos, bSearching
        oText = oTextCursor.getText()
        foundPos = oFoundRange.getStart()

        &apos; Unfortunately, we must go go to this &quot;found&quot; position one character at
        &apos; a time because I have yet to find a way to consistently move the
        &apos; Start range of the text cursor and leave the End range intact.
        If bIsBackwards Then
            curPos = oTextCursor.getEnd()
        Else
            curPos = oTextCursor.getStart()
        End If
        do until oText.compareRegionStarts(foundPos, curPos) = 0
            If bIsBackwards Then
                bSearching = oTextCursor.goLeft(1, bExpand)
                curPos = oTextCursor.getStart()
            Else
                bSearching = oTextCursor.goRight(1, bExpand)
                curPos = oTextCursor.getEnd()
            End If

            &apos; Prevent infinite if unable to find, but shouldn&apos;t ever happen (?)
            If Not bSearching Then
                bMatched = False
                Exit Do
            End If
        Loop

        If searchType = &quot;t&quot; Then
            oTextCursor.goLeft(1, bExpand)
        ElseIf searchType = &quot;T&quot; Then
            oTextCursor.goRight(1, bExpand)
        End If

    Else
        bMatched = False
    End If

    &apos; If matched, then we want to select PAST the character
    &apos; Else, this will counteract some weirdness. hack either way
    If Not bIsBackwards And MODE = &quot;VISUAL&quot; Then
        oTextCursor.goRight(1, bExpand)
    End If

    ProcessSearchKey = bMatched

End Function


Function ProcessInnerKey(oTextCursor, movementModifier, keyChar, bExpand)
    dim bMatched, searchType1, searchType2, search1, search2

    &apos; Setting searchType
    If movementModifier = &quot;i&quot; Then
        searchType1 = &quot;T&quot; : searchType2 = &quot;t&quot;
    ElseIf movementModifier = &quot;a&quot; Then
        searchType1 = &quot;F&quot; : searchType2 = &quot;f&quot;
    Else &apos; Shouldn&apos;t happen
        ProcessInnerKey = False
        Exit Function
    End If

    Select Case keyChar
        Case &quot;(&quot;, &quot;)&quot;, &quot;{&quot;, &quot;}&quot;, &quot;[&quot;, &quot;]&quot;, &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;t&quot;, &quot;&apos;&quot;, &quot;&quot;&quot;&quot;:
            Select Case keyChar
                Case &quot;(&quot;, &quot;)&quot;:
                    search1 = &quot;(&quot; : search2 = &quot;)&quot;
                Case &quot;{&quot;, &quot;}&quot;:
                    search1 = &quot;{&quot; : search2 = &quot;}&quot;
                Case &quot;[&quot;, &quot;]&quot;:
                    search1 = &quot;[&quot; : search2 = &quot;}&quot;
                Case &quot;&lt;&quot;, &quot;&gt;&quot;:
                    search1 = &quot;&lt;&quot; : search2 = &quot;&gt;&quot;
                Case &quot;t&quot;:
                    search1 = &quot;&gt;&quot; : search2 = &quot;&lt;&quot;
                Case &quot;&apos;&quot;:
                    search1 = &quot;&apos;&quot; : search2 = &quot;&apos;&quot;
                Case &quot;&quot;&quot;&quot;:
                    &apos; Matches &quot;smart&quot; quotes, which is default in libreoffice
                    search1 = &quot;“&quot; : search2 = &quot;”&quot;
            End Select

            dim bMatched1, bMatched2
            bMatched1 = ProcessSearchKey(oTextCursor, searchType1, search1, False)
            bMatched2 = ProcessSearchKey(oTextCursor, searchType2, search2, True)

            bMatched = (bMatched1 And bMatched2)

        Case Else:
            bMatched = False

    End Select

    ProcessInnerKey = bMatched
End Function


&apos; -----------------------
&apos; Main Movement Function
&apos; -----------------------
&apos;   Default: bExpand = False, keyModifiers = 0
Function ProcessMovementKey(keyChar, Optional bExpand, Optional keyModifiers)
    dim oTextCursor, bSetCursor, bMatched
    oTextCursor = getTextCursor()
    bMatched = True
    If IsMissing(bExpand) Then bExpand = False
    If IsMissing(keyModifiers) Then keyModifiers = 0


    &apos; Check for modified keys (Ctrl, Alt, not Shift)
    If keyModifiers &gt; 1 Then
        dim bIsControl
        bIsControl = (keyModifiers = 2) or (keyModifiers = 8)

        &apos; Ctrl+d and Ctrl+u
        If bIsControl and keyChar = &quot;d&quot; Then
            getCursor().ScreenDown(bExpand)
        ElseIf bIsControl and keyChar = &quot;u&quot; Then
            getCursor().ScreenUp(bExpand)
        Else
            bMatched = False
        End If

        ProcessMovementKey = bMatched
        Exit Function
    End If

    &apos; Set global cursor to oTextCursor&apos;s new position if moved
    bSetCursor = True


    &apos; ------------------
    &apos; Movement matching
    &apos; ------------------

    &apos; ---------------------------------
    &apos; Special Case: Modified movements
    If getMovementModifier() &lt;&gt; &quot;&quot; Then
        Select Case getMovementModifier()
            &apos; f,F,t,T searching
            Case &quot;f&quot;, &quot;t&quot;, &quot;F&quot;, &quot;T&quot;:
                bMatched  = ProcessSearchKey(oTextCursor, getMovementModifier(), keyChar, bExpand)
            Case &quot;i&quot;, &quot;a&quot;:
                bMatched = ProcessInnerKey(oTextCursor, getMovementModifier(), keyChar, bExpand)

            Case Else:
                bSetCursor = False
                bMatched = False
        End Select

        If Not bMatched Then
            bSetCursor = False
        End If
    &apos; ---------------------------------

    ElseIf keyChar = &quot;l&quot; Then
        oTextCursor.goRight(1, bExpand)

    ElseIf keyChar = &quot;h&quot; Then
        oTextCursor.goLeft(1, bExpand)

    &apos; oTextCursor.goUp and oTextCursor.goDown SHOULD work, but doesn&apos;t (I dont know why).
    &apos; So this is a weird hack
    ElseIf keyChar = &quot;k&quot; Then
        &apos;oTextCursor.goUp(1, False)
        getCursor().goUp(1, bExpand)
        bSetCursor = False

    ElseIf keyChar = &quot;j&quot; Then
        &apos;oTextCursor.goDown(1, False)
        getCursor().goDown(1, bExpand)
        bSetCursor = False
    &apos; ----------

    ElseIf keyChar = &quot;^&quot; Then
        getCursor().gotoStartOfLine(bExpand)
        bSetCursor = False
    ElseIf keyChar = &quot;$&quot; Then
        dim oldPos, newPos
        oldPos = getCursor().getPosition()
        getCursor().gotoEndOfLine(bExpand)
        newPos = getCursor().getPosition()

        &apos; If the result is at the start of the line, then it must have
        &apos; jumped down a line; goLeft to return to the previous line.
        &apos;   Except for: Empty lines (check for oldPos = newPos)
        If getCursor().isAtStartOfLine() And oldPos.Y() &lt;&gt; newPos.Y() Then
            getCursor().goLeft(1, bExpand)
        End If

        &apos; maybe eventually cursorGoto... should return True/False for bsetCursor
        bSetCursor = False

    ElseIf keyChar = &quot;w&quot; or keyChar = &quot;W&quot; Then
        oTextCursor.gotoNextWord(bExpand)
    ElseIf keyChar = &quot;b&quot; or keyChar = &quot;B&quot; Then
        oTextCursor.gotoPreviousWord(bExpand)
    ElseIf keyChar = &quot;e&quot; Then
        oTextCursor.gotoEndOfWord(bExpand)

    ElseIf keyChar = &quot;)&quot; Then
        oTextCursor.gotoNextSentence(bExpand)
    ElseIf keyChar = &quot;(&quot; Then
        oTextCursor.gotoPreviousSentence(bExpand)
    ElseIf keyChar = &quot;}&quot; Then
        oTextCursor.gotoNextParagraph(bExpand)
    ElseIf keyChar = &quot;{&quot; Then
        oTextCursor.gotoPreviousParagraph(bExpand)

    Else
        bSetCursor = False
        bMatched = False
    End If

    &apos; If oTextCursor was moved, set global cursor to its position
    If bSetCursor Then
        getCursor().gotoRange(oTextCursor.getStart(), False)
    End If

    &apos; If oTextCursor was moved and is in VISUAL mode, update selection
    if bSetCursor and bExpand then
        thisComponent.getCurrentController.Select(oTextCursor)
    end if

    ProcessMovementKey = bMatched
End Function


Sub initVibreoffice
    dim oTextCursor
    &apos; Initializing
    VIBREOFFICE_STARTED = True
    VIEW_CURSOR = thisComponent.getCurrentController.getViewCursor

    resetMultiplier()
    gotoMode(&quot;NORMAL&quot;)

    &apos; Show terminal cursor
    oTextCursor = getTextCursor()

    If oTextCursor Is Nothing Then
        &apos; Do nothing
    Else
        cursorReset(oTextCursor)
    End If

    sStartXKeyHandler()
End Sub


Sub Main
    If Not VIBREOFFICE_STARTED Then
        initVibreoffice()
    End If

    &apos; Toggle enable/disable
    VIBREOFFICE_ENABLED = Not VIBREOFFICE_ENABLED

    &apos; Restore statusbar
    If Not VIBREOFFICE_ENABLED Then restoreStatus()
End Sub
</script:module>