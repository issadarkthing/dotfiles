# basic settings

set drawbox true
set color256 true

# interpreter for shell commands (needs to be POSIX compatible)
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set filesep " "

# leave some space at the top and the bottom of the screen
set scrolloff 10


# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
		*/pdf) zathura $f;;
        text/*) $EDITOR $fx;;
		image/*) sxiv $fx;;
        *) for f in `echo $fx | tr ' ' '\n'`; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}


cmd mkdir ${{
	 printf "File name: "
	 read ans
	 mkdir $ans
}}


cmd copyPath ${{
	echo -n $f | xclip -sel clipboard
}}

cmd copyDir ${{
	echo -n $PWD | xclip -sel clipboard
}}

cmd on-cd &{{
    # display git repository status in your prompt
    source /usr/share/git/completion/git-prompt.sh
	echo does this work
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    git=$(__git_ps1 " (%s)") || true
    fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w/\033[0m\033[1m%f$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
}}


cmd pwd %echo $PWD

cmd sumsize %du -csh $fx

cmd chmod ${{
	printf "Mode bits: "
	read ans

	for file in "$fx"; do
		chmod $ans $file
	done
}}

# delete existing keybinding
cmd cd
cmd cd $cd `echo $f | rev | tr '/' ' ' | cut -d' ' -f2- | tr ' ' '/' | rev`

# image preview
map - $~/.config/lf/draw_img.sh $f

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# progress bar when moving
cmd paste &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        rsync -av --ignore-existing --progress $list . \
        | stdbuf -i0 -o0 -e0 tr '\r' '\n' \
        | while read line; do
            lf -remote "send $id echo $line"
        done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

# get total size of files in directory
cmd size %du -sh $f


cmd q quit

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

map <c-p> copyPath
map <c-d> copyDir
map rmws rmws $f
map ch chmod
map sz size
map - $~/.config/lf/draw_img.sh $f
